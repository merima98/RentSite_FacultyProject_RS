// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentSite.WebAPI.Database;

namespace RentSite.WebAPI.Migrations
{
    [DbContext(typeof(RentSiteContext))]
    [Migration("20200615223018_initExam")]
    partial class initExam
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RentSite.WebAPI.Database.AttractiveObjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("TypeOfAttractiveObjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeOfAttractiveObjectId");

                    b.ToTable("AttractiveObjects");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.AttractiveObjectsRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttractiveObjectsId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttractiveObjectsId");

                    b.HasIndex("RoomId");

                    b.ToTable("AttractiveObjects_Room");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Blagaj"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stolac"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pocitelj"
                        });
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.LineOfTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("LineOfTransport");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "10"
                        },
                        new
                        {
                            Id = 2,
                            Name = "11"
                        },
                        new
                        {
                            Id = 3,
                            Name = "12"
                        },
                        new
                        {
                            Id = 4,
                            Name = "13"
                        },
                        new
                        {
                            Id = 5,
                            Name = "6"
                        },
                        new
                        {
                            Id = 6,
                            Name = "2"
                        });
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.LineOfTransportResidentialBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LineOfTransportId")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentialBuildingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineOfTransportId");

                    b.HasIndex("ResidentialBuildingId");

                    b.ToTable("LineOfTransport_ResidentialBuilding");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.LineOfTransportRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LineOfTransportId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LineOfTransportId");

                    b.HasIndex("RoomId");

                    b.ToTable("LineOfTransport_Room");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.RentedResidentialBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BeginRentalDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndRentalDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ResidentialBuildingId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResidentialBuildingId");

                    b.HasIndex("UserId");

                    b.ToTable("Rented_ResidentialBuilding");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.RentedRooms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BeginRentalDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndRentalDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Rented_Rooms");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.ResidentialBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool?>("ArmoredDoor")
                        .HasColumnType("bit");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfPublication")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfRenewal")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<bool?>("NewlyBuilt")
                        .HasColumnType("bit");

                    b.Property<int?>("NubmerOfFloors")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<bool?>("Rented")
                        .HasColumnType("bit");

                    b.Property<string>("TypeOfHeating")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("TypeOfResidentialBuildingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TypeOfResidentialBuildingId");

                    b.ToTable("ResidentialBuilding");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.ResidentialBuildingReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<int?>("ResidentialBuildingId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResidentialBuildingId");

                    b.HasIndex("UserId");

                    b.ToTable("ResidentialBuildingReview");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool?>("ArmoredDoor")
                        .HasColumnType("bit");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfPublication")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfRenewal")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<bool?>("NewlyBuilt")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<bool?>("Rented")
                        .HasColumnType("bit");

                    b.Property<string>("TypeOfHeating")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("TypeOfRoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TypeOfRoomId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.RoomReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomReview");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.TypeOfAttractiveObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TypeOfAttractiveObject");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.TypeOfResidentialBuilding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TypeOfResidentialBuilding");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Home"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Flat"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cottage"
                        });
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.TypeOfRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("NumberOfBeds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TypeOfRoom");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Jednokrevetna",
                            NumberOfBeds = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dvokrevetna",
                            NumberOfBeds = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Trokrevetna",
                            NumberOfBeds = 3
                        });
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.TypeOfUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TypeOfUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("TypeOfUserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("TypeOfUserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "user@gmail.com",
                            FirstName = "Desktop name",
                            LastName = "Desktop last name",
                            PasswordHash = "+UyhM3uH6nHMlKYmOJtV8p2h7jI=",
                            PasswordSalt = "mIdmCJ2LhhfYhGjOu9qQOg==",
                            PhoneNumber = "0322 - 564 -456",
                            Status = true,
                            TypeOfUserId = 1,
                            Username = "desktop"
                        },
                        new
                        {
                            Id = 2,
                            Email = "mobile@gmail.com",
                            FirstName = "Merima",
                            LastName = "Ceranic",
                            PasswordHash = "wXQNmcZDJVPRwsyJar2OEjblDZ0=",
                            PasswordSalt = "eUfwvG+IuFlNvZNzbdoNbQ==",
                            PhoneNumber = "0322 - 564 -456",
                            Status = true,
                            TypeOfUserId = 2,
                            Username = "mobile"
                        },
                        new
                        {
                            Id = 3,
                            Email = "jimm@gmail.com",
                            FirstName = "Jimm",
                            LastName = "Tommy",
                            PasswordHash = "vPL5GLsg9wv8XrbTiKWdlGuWHN8=",
                            PasswordSalt = "QqfU3qsNvpnz/JDog2GRSQ==",
                            PhoneNumber = "0322 - 564 -456",
                            Status = true,
                            TypeOfUserId = 2,
                            Username = "jimm"
                        },
                        new
                        {
                            Id = 4,
                            Email = "ammy@gmail.com",
                            FirstName = "Ammy",
                            LastName = "Tomphson",
                            PasswordHash = "97Di1lbVO0sUysl2Zh4BVgcktPA=",
                            PasswordSalt = "LmXEeohjgWIJdaDfyyyhMQ==",
                            PhoneNumber = "0322 - 564 -456",
                            Status = true,
                            TypeOfUserId = 2,
                            Username = "ammy"
                        });
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.AttractiveObjects", b =>
                {
                    b.HasOne("RentSite.WebAPI.Database.TypeOfAttractiveObject", "TypeOfAttractiveObject")
                        .WithMany("AttractiveObjects")
                        .HasForeignKey("TypeOfAttractiveObjectId")
                        .HasConstraintName("fk_TypeOfAttractiveObjectId");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.AttractiveObjectsRoom", b =>
                {
                    b.HasOne("RentSite.WebAPI.Database.AttractiveObjects", "AttractiveObjects")
                        .WithMany("AttractiveObjectsRoom")
                        .HasForeignKey("AttractiveObjectsId")
                        .HasConstraintName("fk_AttractiveObjectsId");

                    b.HasOne("RentSite.WebAPI.Database.Room", "Room")
                        .WithMany("AttractiveObjectsRoom")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_RoomId");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.LineOfTransportResidentialBuilding", b =>
                {
                    b.HasOne("RentSite.WebAPI.Database.LineOfTransport", "LineOfTransport")
                        .WithMany("LineOfTransportResidentialBuilding")
                        .HasForeignKey("LineOfTransportId")
                        .HasConstraintName("fk_LineOfTransportRBId");

                    b.HasOne("RentSite.WebAPI.Database.ResidentialBuilding", "ResidentialBuilding")
                        .WithMany("LineOfTransportResidentialBuilding")
                        .HasForeignKey("ResidentialBuildingId")
                        .HasConstraintName("fk_ResidentialBuildingId");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.LineOfTransportRoom", b =>
                {
                    b.HasOne("RentSite.WebAPI.Database.LineOfTransport", "LineOfTransport")
                        .WithMany("LineOfTransportRoom")
                        .HasForeignKey("LineOfTransportId")
                        .HasConstraintName("fk_LineOfTransportId");

                    b.HasOne("RentSite.WebAPI.Database.Room", "Room")
                        .WithMany("LineOfTransportRoom")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_Room_LoTId");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.RentedResidentialBuilding", b =>
                {
                    b.HasOne("RentSite.WebAPI.Database.ResidentialBuilding", "ResidentialBuilding")
                        .WithMany("RentedResidentialBuilding")
                        .HasForeignKey("ResidentialBuildingId")
                        .HasConstraintName("fk_ResidentialBuilding_UserId");

                    b.HasOne("RentSite.WebAPI.Database.User", "User")
                        .WithMany("RentedResidentialBuilding")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_UserId");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.RentedRooms", b =>
                {
                    b.HasOne("RentSite.WebAPI.Database.Room", "Room")
                        .WithMany("RentedRooms")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_Room_RentedId");

                    b.HasOne("RentSite.WebAPI.Database.User", "User")
                        .WithMany("RentedRooms")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_User_RoomsId");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.ResidentialBuilding", b =>
                {
                    b.HasOne("RentSite.WebAPI.Database.City", "City")
                        .WithMany("ResidentialBuilding")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_CityRBId");

                    b.HasOne("RentSite.WebAPI.Database.TypeOfResidentialBuilding", "TypeOfResidentialBuilding")
                        .WithMany("ResidentialBuilding")
                        .HasForeignKey("TypeOfResidentialBuildingId")
                        .HasConstraintName("fk_TypeOfResidentialBuildingIdId");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.ResidentialBuildingReview", b =>
                {
                    b.HasOne("RentSite.WebAPI.Database.ResidentialBuilding", "ResidentialBuilding")
                        .WithMany("ResidentialBuildingReview")
                        .HasForeignKey("ResidentialBuildingId")
                        .HasConstraintName("fk_ResidentialBuildingReviewId");

                    b.HasOne("RentSite.WebAPI.Database.User", "User")
                        .WithMany("ResidentialBuildingReview")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_UserReviewId");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.Room", b =>
                {
                    b.HasOne("RentSite.WebAPI.Database.City", "City")
                        .WithMany("Room")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_CityId");

                    b.HasOne("RentSite.WebAPI.Database.TypeOfRoom", "TypeOfRoom")
                        .WithMany("Room")
                        .HasForeignKey("TypeOfRoomId")
                        .HasConstraintName("fk_TypeOfRoomId");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.RoomReview", b =>
                {
                    b.HasOne("RentSite.WebAPI.Database.Room", "Room")
                        .WithMany("RoomReview")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_RoomReviewId");

                    b.HasOne("RentSite.WebAPI.Database.User", "User")
                        .WithMany("RoomReview")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_RoomUserId");
                });

            modelBuilder.Entity("RentSite.WebAPI.Database.User", b =>
                {
                    b.HasOne("RentSite.WebAPI.Database.TypeOfUser", "TypeOfUser")
                        .WithMany("User")
                        .HasForeignKey("TypeOfUserId")
                        .HasConstraintName("fk_TypeOfUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
